package fi.liikennevirasto.digiroad2.util.assetUpdater

import fi.liikennevirasto.digiroad2.GeometryUtils
import fi.liikennevirasto.digiroad2.asset._
import fi.liikennevirasto.digiroad2.client.{RoadLinkChange, RoadLinkChangeType}
import fi.liikennevirasto.digiroad2.linearasset.LinearAssetFiller._
import fi.liikennevirasto.digiroad2.linearasset._
import fi.liikennevirasto.digiroad2.service.linearasset.LinearAssetTypes
import fi.liikennevirasto.digiroad2.service.pointasset.PavedRoadService
import fi.liikennevirasto.digiroad2.util.LinearAssetUtils
import org.joda.time.DateTime

class PavedRoadUpdater(service: PavedRoadService) extends DynamicLinearAssetUpdater(service) {
  
  override def operationForNewLink(change: RoadLinkChange, assetsAll: Seq[PersistedLinearAsset], changeSets: ChangeSet): Option[OperationStep] = {
    val newLink = change.newLinks.head
    
    if (newLink.surfaceType == SurfaceType.Paved) {
      val defaultMultiTypePropSeq = DynamicAssetValue(Seq(DynamicProperty("paallysteluokka", "single_choice", required = false, Seq(DynamicPropertyValue("99")))))
      val defaultPropertyData = DynamicValue(defaultMultiTypePropSeq)
      
      val newAsset = PersistedLinearAsset(0, newLink.linkId,
        sideCode = SideCode.BothDirections.value,
        value = Some(defaultPropertyData),
        startMeasure = 0, endMeasure = GeometryUtils.geometryLength(newLink.geometry), createdBy = Some(AutoGeneratedUsername.mmlPavedDefault),
        createdDateTime = Some(DateTime.now()),
        modifiedBy = None, modifiedDateTime = None, expired = false, 
        typeId = LinearAssetTypes.PavedRoadAssetTypeId,
        timeStamp = LinearAssetUtils.createTimeStamp(), geomModifiedDate = Some(DateTime.now()),
        linkSource = LinkGeomSource.NormalLinkInterface,
        verifiedBy = None, verifiedDate = None,
        informationSource = Some(MmlNls))
      Some(OperationStep(Seq(newAsset), Some(changeSets),Seq()))
    } else {
      None
    }
    
  }

  private def isGeneratedFromMML(asset: PersistedLinearAsset): Boolean = {
    val createdBy = asset.createdBy.getOrElse("")
    val modifiedBy = asset.modifiedBy.getOrElse("")

    val generatedFromMML = createdBy == AutoGeneratedUsername.generatedInUpdate || createdBy == AutoGeneratedUsername.mmlPavedDefault
    val notModified = modifiedBy == "" || modifiedBy == "TODO"

    generatedFromMML && notModified
  }

  private def removePavement(operatio: OperationStep,changes: Seq[RoadLinkChange]) = {
    val assetsAll: Seq[PersistedLinearAsset] = operatio.assetsAfter
    val changeSets: ChangeSet = operatio.changeInfo.get
    val changesRemovePavement = changes.flatMap(_.newLinks).filter(_.surfaceType == SurfaceType.None).map(_.linkId)
    val assetsCreatedFromSurfaceType = assetsAll.filter(isGeneratedFromMML)
    val expiredPavement = assetsCreatedFromSurfaceType.filter(a => changesRemovePavement.contains(a.linkId)).map(asset => {
        if (asset.id != 0) {
          operatio.copy(changeInfo = Some(changeSets.copy(expiredAssetIds = changeSets.expiredAssetIds ++ Set(asset.id))))
        } else {
          val originalAsset = operatio.assetsBefore.find(_.id == asset.oldId)
            .getOrElse(throw new NoSuchElementException(s"Could not find original asset for reporting," +
              s" asset.id: ${asset.id}, asset.oldId: ${asset.oldId}, asset.linkId: ${asset.linkId}"))
          reportAssetChanges(Some(originalAsset), None, changes,  operatio.copy(assetsAfter = Seq()), Some(ChangeTypeReport.Deletion))
        }
    }).foldLeft(OperationStep(assetsAll.filterNot(a => changesRemovePavement.contains(a.linkId)), Some(changeSets)))((a, b) => {
      OperationStep((a.assetsAfter ++ b.assetsAfter).distinct, Some(LinearAssetFiller.combineChangeSets(a.changeInfo.get, b.changeInfo.get)), b.assetsBefore)
    })
    Some(expiredPavement)
  }
  override def additionalOperations(operationStep: OperationStep, changes: Seq[RoadLinkChange]): Option[OperationStep] = {
    removePavement(operationStep,changes)
  }

}
