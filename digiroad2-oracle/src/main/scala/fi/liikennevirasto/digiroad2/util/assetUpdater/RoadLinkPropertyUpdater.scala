package fi.liikennevirasto.digiroad2.util.assetUpdater

import fi.liikennevirasto.digiroad2.asset.AutoGeneratedUsername
import fi.liikennevirasto.digiroad2.client.{RoadLinkChange, RoadLinkChangeClient}
import fi.liikennevirasto.digiroad2.client.RoadLinkChangeType.{Add, Remove}
import fi.liikennevirasto.digiroad2.dao.RoadLinkOverrideDAO
import fi.liikennevirasto.digiroad2.dao.RoadLinkOverrideDAO.{AdministrativeClass, AdministrativeClassDao, FunctionalClass, LinkAttributes, LinkType, TrafficDirection, TrafficDirectionDao}
import fi.liikennevirasto.digiroad2.{DummyEventBus, DummySerializer}
import fi.liikennevirasto.digiroad2.service.RoadLinkService
import fi.liikennevirasto.digiroad2.util.LinearAssetUtils
import fi.liikennevirasto.digiroad2.util.UpdateIncompleteLinkList.roadLinkClient

class RoadLinkPropertyUpdater {

  lazy val roadLinkService: RoadLinkService = new RoadLinkService(roadLinkClient, new DummyEventBus, new DummySerializer)
  lazy val roadLinkChangeClient: RoadLinkChangeClient = new RoadLinkChangeClient
  val propertiesAllowingDelete = Seq(FunctionalClass, TrafficDirection, LinkType, LinkAttributes)

  def removeProperties(removeChanges: Seq[RoadLinkChange]) = {
    removeChanges.map(_.oldLink.get.linkId).foreach { linkId =>
      propertiesAllowingDelete.foreach { propertyName =>
        RoadLinkOverrideDAO.delete(propertyName, linkId)
      }
      AdministrativeClassDao.expireValues(linkId, Some(AutoGeneratedUsername.automaticAdjustment), Some(LinearAssetUtils.createTimeStamp()))
    }
  }

  def createProperties() = {

  }

  def transferProperties(otherChanges: Seq[RoadLinkChange]) = {
    otherChanges.foreach { change =>
      val oldLink = change.oldLink.get

      val optionalOverriddenTrafficDirection = TrafficDirectionDao.getExistingValue(oldLink.linkId)
      optionalOverriddenTrafficDirection match {
        case Some(overriddenTrafficDirection) =>
          change.newLinks.foreach { newLink =>
            if (overriddenTrafficDirection != newLink.trafficDirection.value) {
              RoadLinkOverrideDAO.insert(TrafficDirection, newLink.linkId, Some(AutoGeneratedUsername.automaticGeneration), overriddenTrafficDirection)
            }
            RoadLinkOverrideDAO.delete(TrafficDirection, oldLink.linkId)
          }
      }

    }


  }

  def updateProperties() = {



    val changes = roadLinkChangeClient.getRoadLinkChanges()
    val (addChanges, remaining) = changes.partition(_.changeType == Add)
    val (removeChanges, otherChanges) = remaining.partition(_.changeType == Remove)

    removeProperties(removeChanges)


  }
}
