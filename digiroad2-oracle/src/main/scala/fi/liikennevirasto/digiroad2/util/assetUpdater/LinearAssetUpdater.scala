package fi.liikennevirasto.digiroad2.util.assetUpdater

import fi.liikennevirasto.digiroad2.GeometryUtils.Projection
import fi.liikennevirasto.digiroad2.asset.{AutoGeneratedUsername, EuropeanRoads, ExitNumbers, LinkType, SideCode, UnknownLinkType}
import fi.liikennevirasto.digiroad2.client.vvh.ChangeType.{New, isExtensionChange, isReplacementChange}
import fi.liikennevirasto.digiroad2.client.{RoadLinkChange, RoadLinkChangeClient, RoadLinkChangeType, RoadLinkClient, RoadLinkInfo}
import fi.liikennevirasto.digiroad2.dao.Queries
import fi.liikennevirasto.digiroad2.dao.linearasset.PostGISLinearAssetDao
import fi.liikennevirasto.digiroad2.linearasset.LinearAssetFiller.{ChangeSet, _}
import fi.liikennevirasto.digiroad2.linearasset._
import fi.liikennevirasto.digiroad2.postgis.PostGISDatabase
import fi.liikennevirasto.digiroad2.service.RoadLinkService
import fi.liikennevirasto.digiroad2.service.linearasset.{LinearAssetOperations, LinearAssetTypes, Measures}
import fi.liikennevirasto.digiroad2.util.{Digiroad2Properties, LinearAssetUtils}
import fi.liikennevirasto.digiroad2._
import fi.liikennevirasto.digiroad2.asset.ConstructionType.UnknownConstructionType
import fi.liikennevirasto.digiroad2.asset.LinkGeomSource.NormalLinkInterface
import fi.liikennevirasto.digiroad2.client.vvh.{ChangeInfo, ChangeType}
import org.slf4j.LoggerFactory

import scala.util.Try


case class CalculateMValueChangesInfo(oldId: Option[String], newId: Option[String], 
                                      oldStartMeasure: Option[Double], oldEndMeasure: Option[Double], newStartMeasure: Option[Double],
                                      newEndMeasure: Option[Double],changeType: String="") {
}

case class LinkAndLength (linkId: String, length: Double)

class LinearAssetUpdater(service: LinearAssetOperations) {

  def eventBus: DigiroadEventBus = new DummyEventBus
  def roadLinkClient: RoadLinkClient = new RoadLinkClient(Digiroad2Properties.vvhRestApiEndPoint)
  def roadLinkService: RoadLinkService = new RoadLinkService(roadLinkClient, eventBus, new DummySerializer)
  def assetFiller: AssetFiller = new AssetFiller
  def dao: PostGISLinearAssetDao = new PostGISLinearAssetDao()
  def withDynTransaction[T](f: => T): T = PostGISDatabase.withDynTransaction(f)
  val logger = LoggerFactory.getLogger(getClass)
  val roadLinkChangeClient = new RoadLinkChangeClient
  
  def getRoadlinksAndChanges(typeId:Int) = {
    val latesSuccess = Queries.getLatestSuccessfulSamuutus(typeId)
    roadLinkChangeClient.getRoadLinkChanges(latesSuccess)
  }
  
  def updateLinearAssets(typeId: Int) = {
    withDynTransaction {
    val (changes) = getRoadlinksAndChanges(typeId)
        updateByRoadLinks2(typeId, changes)
    }
  }

  //TODO Remove after bug in combine and fuse operations is fixed
  def cleanRedundantMValueAdjustments(changeSet: ChangeSet, originalAssets: Seq[PieceWiseLinearAsset]): ChangeSet = {
    val redundantFiltered = changeSet.adjustedMValues.filterNot(adjustment => {
      val originalAsset = originalAssets.find(_.id == adjustment.assetId).get
      originalAsset.startMeasure == adjustment.startMeasure && originalAsset.endMeasure == adjustment.endMeasure
    })
    changeSet.copy(adjustedMValues = redundantFiltered)
  }

  val initChangeSet2 = ChangeSet(droppedAssetIds = Set.empty[Long],
    expiredAssetIds =Set.empty[Long],
    adjustedMValues = Seq.empty[MValueAdjustment],
    adjustedVVHChanges = Seq.empty[VVHChangesAdjustment],
    adjustedSideCodes = Seq.empty[SideCodeAdjustment],
    valueAdjustments = Seq.empty[ValueAdjustment])

  
  val isDeleted: RoadLinkChange => Boolean = (change:RoadLinkChange)=>{
    change.changeType.value==RoadLinkChangeType.Remove.value
  }


  case class GroupedChanges(added: Map[String, Seq[RoadLinkChange]],
                            removed: Map[String, Seq[RoadLinkChange]],
                            split: Map[String, Seq[RoadLinkChange]],
                            merged: Map[String, Seq[RoadLinkChange]],
                            lengthened: Map[String, Seq[RoadLinkChange]],
                            shortened: Map[String, Seq[RoadLinkChange]],
                            versionUpdate:Map[String, Seq[RoadLinkChange]]
                           )


  def groupChanges(changes: Seq[RoadLinkChange]): GroupedChanges = {
    val groupedByChange = changes.groupBy(_.changeType)

    def group(a: ((RoadLinkChangeType, Seq[RoadLinkChange])) => Boolean): Map[String, Seq[RoadLinkChange]] = {
      Try(groupedByChange.filter(a).head._2.groupBy(_.oldLink.get.linkId)).getOrElse(Map.empty[String, Seq[RoadLinkChange]])
    }

    group(recognizeMerger)
    val add = group(recognizeAdd)
    val remove = group(recognizeRemove)
    val split = group(recognizeSplit)
    val merger = group(recognizeMerger)
    val lengthened = group(recognizeLengthening)
    val shortened = group(recognizeShortening)
    val versionUpdate = group(recognizeVersionUpgrade)
    GroupedChanges(add, remove, split, merger, lengthened, shortened, versionUpdate)
  }

  def recognizeShortening(change: (RoadLinkChangeType, Seq[RoadLinkChange])): Boolean = {
    change._1 == RoadLinkChangeType.Replace && change._2.size == 1 && recognizeShortening(change._2.head)
  }

  def recognizeLengthening(change: (RoadLinkChangeType, Seq[RoadLinkChange])): Boolean = {
    change._1 == RoadLinkChangeType.Replace && change._2.size == 1 && recognizeLengthening(change._2.head)
  }

  def recognizeAdd(change: (RoadLinkChangeType, Seq[RoadLinkChange])): Boolean = {
    change._1 == RoadLinkChangeType.Split
  }

  def recognizeRemove(change: (RoadLinkChangeType, Seq[RoadLinkChange])): Boolean = {
    change._1 == RoadLinkChangeType.Remove
  }
  def recognizeSplit(change: (RoadLinkChangeType, Seq[RoadLinkChange])): Boolean = {
    change._1 == RoadLinkChangeType.Split
  }
  
  def recognizeLengthening(change:RoadLinkChange): Boolean = {
    val oldMValue = change.oldLink.head.linkLength
    val newMValue = change.newLinks.head.linkLength
    if (oldMValue < newMValue) {
      true
    } else false
  }

  def recognizeShortening(change:RoadLinkChange): Boolean = {
    val oldMValue = change.oldLink.head.linkLength
    val newMValue = change.newLinks.head.linkLength
    if (oldMValue>newMValue){
       true
    } else false
  }

  def splitLinkId(linkId: String): (String, Int) = {
    val split = linkId.split(":")
    (split(0), split(1).toInt)
  }
  def recognizeMerger(change: (RoadLinkChangeType,Seq[RoadLinkChange])): Boolean = {
    change._1 == RoadLinkChangeType.Replace && change._2.size >1
  }
  def recognizeVersionUpgrade(change: (RoadLinkChangeType, Seq[RoadLinkChange])): Boolean = {
    change._1 == RoadLinkChangeType.Replace && change._2.size == 1 && recognizeVersionUpgrade(change._2.head)
  }
  def recognizeVersionUpgrade(change:RoadLinkChange): Boolean = {
    val oldId = splitLinkId(change.oldLink.get.linkId)._1
    val newId = splitLinkId(change.newLinks.head.linkId)._1
    if (oldId == newId) { true
    } else  false
  }
  def toRoadLinkForFilltopology(roadLink: RoadLinkInfo): RoadLinkForFiltopology = {
    RoadLinkForFiltopology(linkId = roadLink.linkId, length = roadLink.linkLength, trafficDirection = roadLink.trafficDirection /*non override version */, administrativeClass = roadLink.adminClass/*non override version */,
      linkSource = NormalLinkInterface,linkType = UnknownLinkType,constructionType = UnknownConstructionType,  geometry = roadLink.geometry) // can there be link of different sourse ?
  }
  def updateByRoadLinks2(typeId: Int, changes: Seq[RoadLinkChange]) = {

    val oldIds = changes.filterNot(isDeleted).map(_.oldLink.get.linkId)
    val deletedLinks = changes.filter(isDeleted).map(_.oldLink.get.linkId)
    val existingAssets = service.fetchExistingAssetsByLinksIdsString(typeId, oldIds.toSet, deletedLinks.toSet, newTransaction = false)

    val initChangeSet = ChangeSet(droppedAssetIds = Set.empty[Long],
      expiredAssetIds = existingAssets.filter(asset => deletedLinks.contains(asset.linkId)).map(_.id).toSet.filterNot(_ == 0L),
      adjustedMValues = Seq.empty[MValueAdjustment],
      adjustedVVHChanges = Seq.empty[VVHChangesAdjustment],
      adjustedSideCodes = Seq.empty[SideCodeAdjustment],
      valueAdjustments = Seq.empty[ValueAdjustment])

    val grouped = groupChanges(changes)

    val (projectedAssets, changedSet) = fillNewRoadLinksWithPreviousAssetsData2(existingAssets, grouped, initChangeSet)
    val convertedLink = changes.flatMap(_.newLinks.map(toRoadLinkForFilltopology))
    val groupedAssets = assetFiller.toLinearAssetsOnMultipleLinks(projectedAssets, convertedLink).groupBy(_.linkId)
    val adjusted =   adjustLinearAssetsOnChangesGeometry(convertedLink, groupedAssets, typeId, Some(changedSet))
    persistProjectedLinearAssets(projectedAssets.filter(_.id == 0L))

  }

  protected def fillNewRoadLinksWithPreviousAssetsData2(assetsAll: Seq[PersistedLinearAsset], changes: GroupedChanges, changeSets: ChangeSet): (Seq[PersistedLinearAsset], ChangeSet) = {
    
    
    val updateVersion = changes.versionUpdate.map(p => {
      val assets = assetsAll.filter(_.linkId == p._1)
      assets.flatMap(a => {
          convertToForCalculation(p,a).map(p1 => {
            projecting(changeSets, assets, a, p1,testAssetsContainSegment)
            //change how adjustment work or check if change is over 0.1 meter
        })
      })
    }).toSeq.flatten

   val merged =  changes.merged.map(p => {
      val assets = assetsAll.filter(_.linkId == p._1)
      assets.flatMap(a => {
        convertToForCalculation(p,a).map(p1 => {
          projecting(changeSets, assets, a, p1,testNoAssetExistsOnTarget)
        })
      })
    }).toSeq.flatten

    val split = changes.split.map(p => {
      val assets = assetsAll.filter(_.linkId == p._1)
      assets.flatMap(a => {
        convertToForCalculation(p,a).map(p1 => {
          projecting(changeSets, assets, a, p1,testNoAssetExistsOnTarget)
        })
      })
    }).toSeq.flatten

    val lengthened = changes.lengthened.map(p => {
      val assets = assetsAll.filter(_.linkId == p._1)
      assets.flatMap(a => {
        convertToForCalculation(p,a).map(p1 => {
          projecting(changeSets, assets, a, p1,testAssetsContainSegment)
        })
      })
    }).toSeq.flatten
    
    val shortened = changes.shortened.map(p => {
      val assets = assetsAll.filter(_.linkId == p._1)
      assets.flatMap(a => {
        convertToForCalculation(p,a).map(p1 => {
          projecting(changeSets, assets, a, p1,testAssetsContainSegment)
        })
      })
    }).toSeq.flatten

    val assets =  shortened.map(_._1) ++ lengthened.map(_._1) ++ split.map(_._1)++merged.map(_._1)  ++updateVersion.map(_._1)
    val mergedChangeSet =  shortened.map(_._2) ++ lengthened.map(_._2) ++ split.map(_._2)++merged.map(_._2)  ++updateVersion.map(_._2)

    val returnedChangeSet = mergedChangeSet.foldRight(changeSets) { (a, z) =>
      a.adjustedMValues ++ z.adjustedMValues
      a.adjustedVVHChanges ++ z.adjustedVVHChanges
      a.adjustedSideCodes ++ z.adjustedSideCodes
      a.expiredAssetIds ++ z.expiredAssetIds
      a.valueAdjustments ++ z.valueAdjustments
      a
    }
    (assets, returnedChangeSet)
  }


  private def projecting(changeSets: ChangeSet, assets: Seq[PersistedLinearAsset], a: PersistedLinearAsset, p1: (LinkAndLength, CalculateMValueChangesInfo), condition: (Seq[PersistedLinearAsset],String, String, Double, Double) => Boolean) = {
    val projected = projectAssetsConditionally(p1._2, assets, condition)
    projectLinearAsset(a.copy(linkId = p1._1.linkId), p1._1, projected.getOrElse(throw new Exception(s"Projection returned Nothing ,link: ${p1._1.linkId}")), changeSets)
  }
  private def convertToForCalculation(p: (String, Seq[RoadLinkChange]), a:PersistedLinearAsset) = {
    val lengthAndChange = p._2.map(p => {
      val info = p.replaceInfo.find(_.oldLinkId == a.linkId).get
      val link = p.newLinks.find(_.linkId == info.newLinkId).get
      (LinkAndLength(info.newLinkId, link.linkLength), CalculateMValueChangesInfo(
        Some(info.oldLinkId),
        Some(info.newLinkId),
        Some(info.oldFromMValue),
        Some(info.oldToMValue),
        Some(info.newFromMValue),
        Some(info.newToMValue)))
    })
    lengthAndChange
  }
  def adjustLinearAssetsOnChangesGeometry(roadLinks: Seq[RoadLinkForFiltopology], linearAssets:  Map[String, Seq[PieceWiseLinearAsset]],
                                          typeId: Int, changeSet: Option[ChangeSet] = None, counter: Int = 1): (Seq[PieceWiseLinearAsset],ChangeSet) = {

    
    // TODO is there need validate whole asset network?
    val (filledTopology, changedSet) = assetFiller.fillTopologyChangesGeometry(roadLinks, linearAssets, typeId, changeSet)
    val adjustmentsChangeSet = cleanRedundantMValueAdjustments(changedSet, linearAssets.values.flatten.toSeq)
    adjustmentsChangeSet.isEmpty match { //  Validate that there is no infinity loop 
      case true => filledTopology
      case false if counter > 3 =>
        updateChangeSet(adjustmentsChangeSet)
        filledTopology
      case false if counter <= 3 =>
        updateChangeSet(adjustmentsChangeSet)
        val linearAssetsToAdjust = filledTopology.filterNot(asset => asset.id <= 0 && asset.value.isEmpty)
        adjustLinearAssetsOnChangesGeometry(roadLinks, linearAssetsToAdjust.groupBy(_.linkId), typeId, None, counter + 1)
    }

    updateChangeSet(adjustmentsChangeSet)
    (filledTopology,adjustmentsChangeSet)
  }
  
  def updateChangeSet(changeSet: ChangeSet) : Unit = {
    dao.floatLinearAssets(changeSet.droppedAssetIds)

    if (changeSet.adjustedMValues.nonEmpty)
      println("Saving adjustments for asset/link ids=" + changeSet.adjustedMValues.map(a => "" + a.assetId + "/" + a.linkId).mkString(", "))

    changeSet.adjustedMValues.foreach { adjustment =>
      dao.updateMValues(adjustment.assetId,adjustment.linkId, (adjustment.startMeasure, adjustment.endMeasure))
    }

    if (changeSet.adjustedVVHChanges.nonEmpty)
      println("Saving adjustments for asset/link ids=" + changeSet.adjustedVVHChanges.map(a => "" + a.assetId + "/" + a.linkId).mkString(", "))

    changeSet.adjustedVVHChanges.foreach { adjustment =>
      dao.updateMValuesChangeInfo(adjustment.assetId,adjustment.linkId, (adjustment.startMeasure, adjustment.endMeasure), adjustment.timeStamp, AutoGeneratedUsername.generatedInUpdate)
    }
    val ids = changeSet.expiredAssetIds.toSeq
    if (ids.nonEmpty)
      println("Expiring ids " + ids.mkString(", "))
    ids.foreach(dao.updateExpiration(_, expired = true, AutoGeneratedUsername.generatedInUpdate))

    if (changeSet.adjustedSideCodes.nonEmpty)
      println("Saving SideCode adjustments for asset/link ids=" + changeSet.adjustedSideCodes.map(a => "" + a.assetId).mkString(", "))

    changeSet.adjustedSideCodes.foreach { adjustment =>
      adjustedSideCode(adjustment)
    }

    if (changeSet.valueAdjustments.nonEmpty)
      println("Saving value adjustments for assets: " + changeSet.valueAdjustments.map(a => "" + a.asset.id).mkString(", "))
    changeSet.valueAdjustments.foreach { adjustment =>
      service.updateWithoutTransaction(Seq(adjustment.asset.id), adjustment.asset.value.get, adjustment.asset.modifiedBy.get)

    }
  }

  def persistProjectedLinearAssets(newLinearAssets: Seq[PersistedLinearAsset]): Unit = {
    if (newLinearAssets.nonEmpty)
      logger.info("Saving projected linear assets")

    def getValuePropertyId(value: Option[Value], typeId: Int) = {
      value match {
        case Some(NumericValue(intValue)) =>
          LinearAssetTypes.numericValuePropertyId
        case Some(TextualValue(textValue)) =>
          LinearAssetTypes.getValuePropertyId(typeId)
        case _ => ""
      }
    }

    val (toInsert, toUpdate) = newLinearAssets.partition(_.id == 0L)
    val roadLinks = roadLinkService.getRoadLinksAndComplementariesByLinkIds(newLinearAssets.map(_.linkId).toSet, newTransaction = false)
    if (toUpdate.nonEmpty) {
      val toUpdateText = toUpdate.filter(a =>
        Set(EuropeanRoads.typeId, ExitNumbers.typeId).contains(a.typeId))

      val groupedNum = toUpdate.filterNot(a => toUpdateText.contains(a)).groupBy(a => getValuePropertyId(a.value, a.typeId)).filterKeys(!_.equals(""))
      val groupedText = toUpdateText.groupBy(a => getValuePropertyId(a.value, a.typeId)).filterKeys(!_.equals(""))

      val persisted = (groupedNum.flatMap(group => dao.fetchLinearAssetsByIds(group._2.map(_.id).toSet, group._1)).toSeq ++
        groupedText.flatMap(group => dao.fetchAssetsWithTextualValuesByIds(group._2.map(_.id).toSet, group._1)).toSeq).groupBy(_.id)

      updateProjected(toUpdate, persisted)
      if (newLinearAssets.nonEmpty)
        logger.info("Updated ids/linkids " + toUpdate.map(a => (a.id, a.linkId)))
    }
    toInsert.foreach { linearAsset =>
      val roadlink = roadLinks.find(_.linkId == linearAsset.linkId)
      val id =
        (linearAsset.createdBy, linearAsset.createdDateTime) match {
          case (Some(createdBy), Some(createdDateTime)) =>
            dao.createLinearAsset(linearAsset.typeId, linearAsset.linkId, linearAsset.expired, linearAsset.sideCode,
              Measures(linearAsset.startMeasure, linearAsset.endMeasure), AutoGeneratedUsername.generatedInUpdate, linearAsset.timeStamp,
              service.getLinkSource(roadlink), fromUpdate = true, Some(createdBy), Some(createdDateTime), linearAsset.verifiedBy, linearAsset.verifiedDate, geometry = service.getGeometry(roadlink))
          case _ =>
            dao.createLinearAsset(linearAsset.typeId, linearAsset.linkId, linearAsset.expired, linearAsset.sideCode,
              Measures(linearAsset.startMeasure, linearAsset.endMeasure), AutoGeneratedUsername.generatedInUpdate, linearAsset.timeStamp,
              service.getLinkSource(roadlink), geometry = service.getGeometry(roadlink))
        }

      linearAsset.value match {
        case Some(NumericValue(intValue)) =>
          dao.insertValue(id, LinearAssetTypes.numericValuePropertyId, intValue)
        case Some(TextualValue(textValue)) =>
          dao.insertValue(id, LinearAssetTypes.getValuePropertyId(linearAsset.typeId), textValue)
        case _ => None
      }
    }
    if (toInsert.nonEmpty)
      logger.info("Added assets for linkids " + newLinearAssets.map(_.linkId))
  }

  protected def updateProjected(toUpdate: Seq[PersistedLinearAsset], persisted: Map[Long, Seq[PersistedLinearAsset]]) = {
    def valueChanged(assetToPersist: PersistedLinearAsset, persistedLinearAsset: Option[PersistedLinearAsset]) = {
      !persistedLinearAsset.exists(_.value == assetToPersist.value)
    }

    toUpdate.foreach { linearAsset =>
      val persistedLinearAsset = persisted.getOrElse(linearAsset.id, Seq()).headOption
      val id = linearAsset.id
      if (valueChanged(linearAsset, persistedLinearAsset)) {
        linearAsset.value match {
          case Some(NumericValue(intValue)) =>
            dao.updateValue(id, intValue, LinearAssetTypes.numericValuePropertyId, AutoGeneratedUsername.generatedInUpdate)
          case Some(TextualValue(textValue)) =>
            dao.updateValue(id, textValue, LinearAssetTypes.getValuePropertyId(linearAsset.typeId), AutoGeneratedUsername.generatedInUpdate)
          case _ => None
        }
      }
    }
  }

  protected def fillNewRoadLinksWithPreviousAssetsData(roadLinks: Seq[RoadLink], assetsToUpdate: Seq[PersistedLinearAsset],
                                                       currentAssets: Seq[PersistedLinearAsset], changes: Seq[RoadLinkChange], 
                                                       changeSet: ChangeSet, existingAssets: Seq[PersistedLinearAsset]): (Seq[PersistedLinearAsset], ChangeSet) = {


    /*val (replacementChanges, otherChanges) = changes.partition(isReplacementChange)
    val reverseLookupMap = replacementChanges.filterNot(c=>c.oldId.isEmpty || c.newId.isEmpty).map(c => c.newId.get -> c).groupBy(_._1).mapValues(_.map(_._2))

    val extensionChanges = otherChanges.filter(isExtensionChange).flatMap(
      ext => reverseLookupMap.getOrElse(ext.newId.getOrElse(LinkId.Unknown.value), Seq()).flatMap(
        rep => addSourceRoadLinkToChangeInfo(ext, rep)))

    val fullChanges = extensionChanges ++ replacementChanges


    val linearAssetsAndChanges = mapReplacementProjections(assetsToUpdate, currentAssets, roadLinks, fullChanges).flatMap {
      case (asset, (Some(roadLink), Some(projection))) =>
        val (linearAsset, changes) = projectLinearAsset(asset, roadLink, projection, changeSet)
        Some((linearAsset, changes))
      case _ => None
    }

    val linearAssets = linearAssetsAndChanges.map(_._1)
    val generatedChangeSet = linearAssetsAndChanges.map(_._2)
    val changeSetF = if (generatedChangeSet.nonEmpty) { generatedChangeSet.last } else { changeSet }
    val newLinearAsset = if((linearAssets ++ existingAssets).nonEmpty) {
      Seq()
    } else Seq()

    (linearAssets ++ newLinearAsset, changeSetF)*/
    (Seq(), initChangeSet2)
  }

  private def projectAssetsConditionally(change: CalculateMValueChangesInfo, assets: Seq[PersistedLinearAsset],
                                         condition: (Seq[PersistedLinearAsset],String, String, Double, Double) => Boolean): Option[Projection] = {
    (change.oldId,change.newId, change.oldStartMeasure, change.oldEndMeasure, change.newStartMeasure, change.newEndMeasure) match {
      case (Some(from),Some(to), Some(oldStart:Double), Some(oldEnd:Double), Some(newStart:Double), Some(newEnd:Double)) =>
        {
          println("condition status: ")
          println(condition(assets,from, to, oldStart, oldEnd))
          condition(assets,from, to, oldStart, oldEnd) match {
            case true => Some(Projection(oldStart, oldEnd, newStart, newEnd))
            case false =>
              None
          }
        }
      
      case _ =>
        None
    }
  }

  private def testNoAssetExistsOnTarget(assets: Seq[PersistedLinearAsset], oldId: String, newId: String, mStart: Double, mEnd: Double): Boolean = {
   // !assets.exists(l => l.linkId == oldId && GeometryUtils.overlaps((l.startMeasure,l.endMeasure),(mStart,mEnd)))
    
    true
  }

  private def testAssetsContainSegment(assets: Seq[PersistedLinearAsset], oldId: String, newId: String, mStart: Double, mEnd: Double): Boolean = {
    val targetAssets = assets.filter(a => a.linkId == oldId)
    targetAssets.nonEmpty && targetAssets.exists(
      a => GeometryUtils.covered((a.startMeasure, a.endMeasure),(mStart,mEnd)))
  }

  def adjustedSideCode(adjustment: SideCodeAdjustment): Unit = {
    val oldAsset = service.getPersistedAssetsByIds(adjustment.typeId, Set(adjustment.assetId), newTransaction = false).headOption
      .getOrElse(throw new IllegalStateException("Old asset " + adjustment.assetId + " of type " + adjustment.typeId + " no longer available"))
    
    val roadLink = roadLinkService.getRoadLinkAndComplementaryByLinkId(oldAsset.linkId, newTransaction = false)
      .getOrElse(throw new IllegalStateException("Road link " + oldAsset.linkId + " no longer available"))
    
    service.expireAsset(oldAsset.typeId, oldAsset.id, AutoGeneratedUsername.generatedInUpdate, expired = true, newTransaction = false)
    
    val oldAssetValue = oldAsset.value.getOrElse(throw new IllegalStateException("Value of the old asset " + oldAsset.id + " of type " + oldAsset.typeId + " is not available"))
    
    service.createWithoutTransaction(oldAsset.typeId, oldAsset.linkId,oldAssetValue , adjustment.sideCode.value,
      Measures(oldAsset.startMeasure, oldAsset.endMeasure), AutoGeneratedUsername.generatedInUpdate, LinearAssetUtils.createTimeStamp(),
      Some(roadLink), false, Some(AutoGeneratedUsername.generatedInUpdate), None, oldAsset.verifiedBy, oldAsset.informationSource.map(_.value))
    
  }

  private def calculateNewMValuesAndSideCode(asset: PersistedLinearAsset, projection: Projection, roadLinkLength: Double) = {
    val oldLength = projection.oldEnd - projection.oldStart
    val newLength = projection.newEnd - projection.newStart
    println("Directon changes: "+ GeometryUtils.isDirectionChangeProjection(projection))
    // Test if the direction has changed -> side code will be affected, too
    if (GeometryUtils.isDirectionChangeProjection(projection)) {
      val newSideCode = SideCode.apply(asset.sideCode) match {
        case (SideCode.AgainstDigitizing) => SideCode.TowardsDigitizing.value
        case (SideCode.TowardsDigitizing) => SideCode.AgainstDigitizing.value
        case _ => asset.sideCode
      }
      val newStart = projection.newStart - (asset.endMeasure - projection.oldStart) * Math.abs(newLength / oldLength)
      val newEnd = projection.newEnd - (asset.startMeasure - projection.oldEnd) * Math.abs(newLength / oldLength)
      // Test if asset is affected by projection
      if (asset.endMeasure <= projection.oldStart || asset.startMeasure >= projection.oldEnd)
        (asset.startMeasure, asset.endMeasure, newSideCode)
      else
        (Math.min(roadLinkLength, Math.max(0.0, newStart)), Math.max(0.0, Math.min(roadLinkLength, newEnd)), newSideCode)
    } else {
      val newStart = projection.newStart + (asset.startMeasure - projection.oldStart) * Math.abs(newLength / oldLength)
      val newEnd = projection.newEnd + (asset.endMeasure - projection.oldEnd) * Math.abs(newLength / oldLength)
      // Test if asset is affected by projection
      if (asset.endMeasure <= projection.oldStart || asset.startMeasure >= projection.oldEnd) {
        (asset.startMeasure, asset.endMeasure, asset.sideCode)
      } else {
        (Math.min(roadLinkLength, Math.max(0.0, newStart)), Math.max(0.0, Math.min(roadLinkLength, newEnd)), asset.sideCode)
      }
    }
  }

  def projectLinearAsset(asset: PersistedLinearAsset, to: LinkAndLength, projection: Projection, changedSet: ChangeSet) : (PersistedLinearAsset, ChangeSet)= {
    val newLinkId = to.linkId
    val assetId = asset.linkId match {
      case to.linkId => asset.id
      case _ => 0
    }
    val (newStart, newEnd, newSideCode) = calculateNewMValuesAndSideCode(asset, projection, to.length)
    
    val changeSet = assetId match {
      case 0 => changedSet
      case _ => changedSet.copy(adjustedVVHChanges = changedSet.adjustedVVHChanges ++ Seq(VVHChangesAdjustment(assetId, newLinkId, newStart, newEnd, projection.timeStamp)), 
        adjustedSideCodes =
          if (asset.sideCode == newSideCode) {
            changedSet.adjustedSideCodes
          } else {
            changedSet.adjustedSideCodes ++ Seq(SideCodeAdjustment(assetId, SideCode.apply(newSideCode), asset.typeId))
          }
          )
    }

    (PersistedLinearAsset(id = assetId, linkId = newLinkId, sideCode = newSideCode,
      value = asset.value, startMeasure = newStart, endMeasure = newEnd,
      createdBy = asset.createdBy, createdDateTime = asset.createdDateTime, modifiedBy = asset.modifiedBy,
      modifiedDateTime = asset.modifiedDateTime, expired = false, typeId = asset.typeId,
      timeStamp = projection.timeStamp, geomModifiedDate = None, linkSource = asset.linkSource, verifiedBy = asset.verifiedBy, verifiedDate = asset.verifiedDate,
      informationSource = asset.informationSource), changeSet)
  }
}
