package fi.liikennevirasto.digiroad2.util

import fi.liikennevirasto.digiroad2.postgis.PostGISDatabase
import slick.driver.JdbcDriver.backend.Database
import Database.dynamicSession
import org.slf4j.LoggerFactory
import slick.jdbc.StaticQuery.interpolation

// A batch job for one time use to replace vvh-terminology from db and incorrect form 'auto_generation'.
object ReplaceAutoGeneratedValues {

  val tablesWithValuesToReplace = Seq("asset", "lane", "lane_attribute", "lane_history", "lane_history_attribute",
  "text_property_value")
  val columnsWithValuesToReplace = Seq("created_by", "modified_by")
  val valuesToReplace = Map("vvh_generated" -> "generated_in_update", "vvh_modified" -> "automatic_adjustment",
    "vvh_mtkclass_default" -> "mtk_class_default", "auto_generation" -> "automatic_generation", "dr1conversion" -> "dr1_conversion")
  val batchSize = 20000
  private val logger = LoggerFactory.getLogger(getClass)

  def withDynSession[T](f: => T): T = PostGISDatabase.withDynSession(f)
  def withDynTransaction(f: => Unit): Unit = PostGISDatabase.withDynTransaction(f)

  def selectLinkIdsToUpdate(tableName: String, columnName: String, oldValue: String, test: Boolean) = {
    if (test) {
      sql"select id from #${tableName} where #${columnName} = '#${oldValue}' order by id".as[Long].list
    } else {
      withDynSession(sql"select id from #${tableName} where #${columnName} = '#${oldValue}' order by id".as[Long].list)
    }
  }

  def updateColumnValues(tableName: String, columnName: String, ids: Seq[Long], newValue: String, test: Boolean) = {
    val idsAsString = ids.mkString("(", ",", ")")
    if (test) {
      sqlu"update #${tableName} set #${columnName} = '#${newValue}' where id in #${idsAsString}".execute
    } else {
      withDynTransaction(sqlu"update #${tableName} set #${columnName} = '#${newValue}' where id in #${idsAsString}".execute)
    }
  }

  def main(test: Boolean = false) = {
    tablesWithValuesToReplace.foreach {
      tableName => columnsWithValuesToReplace.foreach {
        columnName => valuesToReplace.foreach {
          value =>
            val idGroups = selectLinkIdsToUpdate(tableName, columnName, value._1, test).grouped(batchSize).toSeq
            idGroups.foreach {
              ids =>
              try {
                updateColumnValues(tableName, columnName, ids, value._2, test)
                println(s"Updated ${value._1} to ${value._2} in table $tableName column $columnName for ids between " +
                  s"${ids.head} and ${ids.last}.")
              } catch {
                case e => logger.error(s"Update from ${value._1} to ${value._2} in table $tableName column $columnName " +
                  s"for ids between ${ids.head} and ${ids.last} failed due to ${e.getMessage}.")
              }
            }
        }
      }
    }
  }
}

