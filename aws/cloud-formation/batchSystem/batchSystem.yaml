AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  DEVNetworkStackName:
    Description: Name of DEV network stack
    Type: String
  QANetworkStackName:
    Description: Name of QA network stack
    Type: String
  DEVVpcIDOfSystem:
    Type: AWS::EC2::VPC::Id
    Description: DEV VPC of your system
  QAVpcIDOfSystem:
    Type: AWS::EC2::VPC::Id
    Description: QA VPC of your system
  SNSTopicName:
    Type: String
    Description: Name of SNS topic

Resources:
  JobQueueAdHoc:
    Type: AWS::Batch::JobQueue
    Properties:
      JobQueueName: "AdHoc"
      Priority: 1
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment:
            Ref: DEVComputeEnvironment

  JobQueueUpdateIncompleteList:
    Type: AWS::Batch::JobQueue
    Properties:
      JobQueueName: "UpdateIncompleteList"
      Priority: 1
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment:
            Ref: DEVComputeEnvironment

  DEVJobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      JobQueueName: "DEV-JobQueue"
      Priority: 1
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment:
            Ref: DEVComputeEnvironment

  QAJobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      JobQueueName: "QA-JobQueue"
      Priority: 1
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment:
            Ref: QAComputeEnviroment

  DEVComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      Type: MANAGED
      ComputeEnvironmentName: "DEV-BatchCompute"
      ComputeResources:
        Type: FARGATE
        MaxvCpus: 32
        Subnets:
          - Fn::ImportValue:
              !Join [ '-', [ !Ref DEVNetworkStackName, 'Subnet1-Id' ] ]
          - Fn::ImportValue:
              !Join [ '-', [ !Ref DEVNetworkStackName, 'Subnet2-Id' ] ]
        SecurityGroupIds:
          - !Ref DEVBatchSecurityGroup
      ServiceRole:
        Ref: BatchServiceRole

  DEVBatchSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allaw inbound to port 80 and 5432, Outbound to everything
      GroupName: DEV-BatchSecurityGroup
      VpcId: !Ref DEVVpcIDOfSystem

  QAComputeEnviroment:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      Type: MANAGED
      ComputeEnvironmentName: "QA-BatchCompute"
      ComputeResources:
        Type: FARGATE
        MaxvCpus: 32
        Subnets:
          - Fn::ImportValue:
              !Join [ '-', [ !Ref QANetworkStackName, 'Subnet1-Id' ] ]
          - Fn::ImportValue:
              !Join [ '-', [ !Ref QANetworkStackName, 'Subnet2-Id' ] ]
        SecurityGroupIds:
          - !Ref QABatchSecurityGroup
      ServiceRole:
        Ref: BatchServiceRole



  QABatchSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allaw inbound to port 80 and 5432, Outbound to everything
      GroupName: QA-BatchSecurityGroup
      VpcId: !Ref QAVpcIDOfSystem


  BatchTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonBatchECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Allow the ECS Tasks to download images from ECR
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'

                  # Allow the ECS tasks to upload logs to CloudWatch
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'

                  - 'ssm:GetParameter'
                  - 'ssm:GetParameters'
                  - 'ssm:GetParametersByPath'
                Resource: '*'

  BatchServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: batch.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole

  BatchSNSTopic:
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: "AWS Batch Job Has Failed"
      FifoTopic: FALSE
      Subscription: 
        - Endpoint: "kehitys@digiroad.fi"
          Protocol: "email"
      TopicName: !Ref SNSTopicName

  BatchEventRule:
    Type: AWS::Events::Rule
    Properties: 
      Description: "Send SNS email for failed batch jobs"
      EventPattern: {"detail-type": ["Batch Job State Change"], "source": ["aws.batch"], "detail": {"status": ["FAILED"]}}
      Name: "BatchEventNotify"
      State: "ENABLED"
      Targets:
        - Arn: !Join ['', ["arn:aws:sns:eu-west-1:475079312496:", !Ref SNSTopicName]]
          Id: "123321"


Outputs:
  BatchTaskRoleARN:
    Description: BatchTaskRole
    Value: !GetAtt BatchTaskRole.Arn
  BatchExecutionArn:
    Description: BatchServiceRole
    Value: !GetAtt BatchServiceRole.Arn
