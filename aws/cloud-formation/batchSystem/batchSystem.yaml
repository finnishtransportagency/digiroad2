AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  NetworkStackName:
    Description: Name of network stack
    Type: String
  VpcIDOfSystem:
    Type: AWS::EC2::VPC::Id
    Description: VPC of your system
  EnvironmentName:
    Type: String
    Description: Name of used environment
  JobDefinitionName:
    Type: String
    Description: Name of Job Definition that Lambda uses to submit job
  BatchLambdaStackName:
    Type: String
    Description: Stack name of batch lambda, used for ImportValue
  Subnet1:
    Type: String
    Description: Subnet1 Id for ImportValue
  Subnet2:
    Type: String
    Description: Subnet2 Id for ImportValue
  Owner:
    Description: "Owner of the of application, that these resources are created for. Used when tagging the resources"
    Type: String
  Project:
    Description: "Project of the of application, that these resources are created for. Used when tagging the resources"
    Type: String
  ApplicationName:
    Description: Name of the application (no whitespace or special characters)
    Type: String
  LambdaInputAnnual:
    Description: Input for adding annual jobs to queue
    Type: String
  LambdaInputMonthly:
    Description: Input for adding monthly jobs to queue
    Type: String
  LambdaInputWeekly:
    Description: Input for adding annual jobs to queue
    Type: String
  LambdaInputDaily:
    Description: Input for adding annual jobs to queue
    Type: String
  LambdaInputRefreshCache:
    Description: Input for adding refresh_roadlinks job to queue
    Type: String

Resources:
  JobQueueAdHoc:
    Type: AWS::Batch::JobQueue
    Properties:
      JobQueueName: !Join [ '-', [ !Ref EnvironmentName, 'batch-adhoc']]
      Priority: 1
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment:
            Ref: ComputeEnvironment
      Tags: {"Name" : "Digiroad2-JobQueue-Adhoc", "Environment" : !Ref EnvironmentName, "Owner": !Ref Owner, "Project": !Ref Project}

  JobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      JobQueueName: !Join [ '-', [ !Ref EnvironmentName, 'batch-jobQueue']]
      Priority: 1
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment:
            Ref: ComputeEnvironment
      Tags: {"Name" : "Digiroad2-JobQueue", "Environment" : !Ref EnvironmentName, "Owner": !Ref Owner, "Project": !Ref Project}
  ComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      Type: MANAGED
      ComputeEnvironmentName: !Join [ '-', [ !Ref EnvironmentName, 'BatchComputeEnvironment']]
      ComputeResources:
        Type: FARGATE
        MaxvCpus: 32
        Subnets:
          - Fn::ImportValue:
              !Ref Subnet1
          - Fn::ImportValue:
              !Ref Subnet2
        SecurityGroupIds:
          - !Ref BatchSecurityGroup
      ServiceRole:
        Ref: BatchServiceRole
      Tags: {"Name" : "Digiroad2-BatchComputeEnvironment", "Environment" : !Ref EnvironmentName, "Owner": !Ref Owner, "Project": !Ref Project}

  BatchSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow inbound to port 80, 443 and 5432, Outbound to everything"
      GroupName: !Join [ '-', [ !Ref EnvironmentName, !Ref ApplicationName,'batchSecurityGroup']]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIpv6: ::/0
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIpv6: ::/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIpv6: ::/0
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VpcIDOfSystem
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref EnvironmentName, !Ref ApplicationName, 'batchSecurityGroup' ] ]
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project

  BatchTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: !Join [ '-', [ !Ref EnvironmentName, !Ref ApplicationName,'AmazonBatchECSTaskExecutionRolePolicy']]
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Allow the ECS Tasks to download images from ECR
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'

                  # Allow the ECS tasks to upload logs to CloudWatch
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'

                  - 'ssm:GetParameter'
                  - 'ssm:GetParameters'
                  - 'ssm:GetParametersByPath'

                  # Allow batch to get objects from S3, used for main lane start date import
                  - 's3:GetObject'
                Resource: '*'
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref EnvironmentName, !Ref ApplicationName, 'batchTaskRole' ] ]
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project

  BatchServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: batch.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref EnvironmentName, !Ref ApplicationName, 'batchServiceRole' ] ]
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project

  #Batch Events
  RunAnnualBatch:
    Type: AWS::Events::Rule
    Properties:
      Name: !Join [ '-', [ !Ref EnvironmentName, 'BatchAnnualEventRule' ]]
      Description: "Run annual batches"
      ScheduleExpression: "cron(30 22 L 12 ? *)"
      State: "ENABLED"
      Targets:
        -
          Arn: !ImportValue 'BatchLambdaID'
          Input: !Ref LambdaInputAnnual
          Id: !Join [ '-' , [!Ref EnvironmentName, 'AnnualLambda']]

  RunMonthlyBatch:
    Type: AWS::Events::Rule
    Properties:
      Name: !Join [ '-', [ !Ref EnvironmentName, 'BatchMonthlyEventRule' ]]
      Description: "Run monthly batches"
      ScheduleExpression: "cron(30 22 14 * ? *)"
      State: "ENABLED"
      Targets:
        -
          Arn: !ImportValue 'BatchLambdaID'
          Input: !Ref LambdaInputMonthly
          Id: !Join [ '-' , [!Ref EnvironmentName, 'MonthlyLambda']]

  RunWeeklyBatch:
    Type: AWS::Events::Rule
    Properties:
      Name: !Join [ '-', [ !Ref EnvironmentName, 'BatchWeeklyEventRule' ]]
      Description: "Run weekly batches"
      ScheduleExpression: "cron(0 22 ? * 6 *)"
      State: "ENABLED"
      Targets:
        -
          Arn: !ImportValue 'BatchLambdaID'
          Input: !Ref LambdaInputWeekly
          Id: !Join [ '-' , [!Ref EnvironmentName, 'WeeklyLambda']]

  RunDailyBatch:
    Type: AWS::Events::Rule
    Properties:
      Name: !Join [ '-', [ !Ref EnvironmentName, 'batchDailyEventRule' ]]
      Description: "Run daily batches"
      ScheduleExpression: "cron(30 22 ? * 1-5 *)"
      State: "ENABLED"
      Targets:
        -
          Arn: !ImportValue 'BatchLambdaID'
          Input: !Ref LambdaInputDaily
          Id: !Join [ '-' , [!Ref EnvironmentName, 'DailyLambda']]

  #  Need special Event Rule for this batch because batch must be started at specific time
  RunRefreshCacheBatch:
    Type: AWS::Events::Rule
    Properties:
      Name: !Join [ '-', [ !Ref EnvironmentName, 'batchRefreshCacheEventRule' ] ]
      Description: "Run refresh_road_link_cache batch on Friday 16:00"
      ScheduleExpression: "cron(0 14 ? * FRI *)"
      State: "ENABLED"
      Targets:
        - Arn: !ImportValue 'BatchLambdaID'
          Input: !Ref LambdaInputRefreshCache
          Id: !Join [ '-' , [ !Ref EnvironmentName, 'DailyLambda' ] ]

  #Lambda permissions for events

  RefreshCachePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !ImportValue 'BatchLambdaID'
      Principal: events.amazonaws.com
      SourceArn: !GetAtt RunRefreshCacheBatch.Arn

  AnnualLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !ImportValue 'BatchLambdaID'
      Principal: events.amazonaws.com
      SourceArn: !GetAtt RunAnnualBatch.Arn

  MonthlyLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !ImportValue 'BatchLambdaID'
      Principal: events.amazonaws.com
      SourceArn: !GetAtt RunMonthlyBatch.Arn

  WeeklyLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !ImportValue 'BatchLambdaID'
      Principal: events.amazonaws.com
      SourceArn: !GetAtt RunWeeklyBatch.Arn

  DailyLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !ImportValue 'BatchLambdaID'
      Principal: events.amazonaws.com
      SourceArn: !GetAtt RunDailyBatch.Arn

Outputs:
  BatchTaskRoleARN:
    Description: BatchTaskRole
    Value: !GetAtt BatchTaskRole.Arn
  BatchExecutionArn:
    Description: BatchServiceRole
    Value: !GetAtt BatchServiceRole.Arn
