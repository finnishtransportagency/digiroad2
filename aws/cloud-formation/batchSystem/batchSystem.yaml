AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  DEVNetworkStackName:
    Description: Name of DEV network stack
    Type: String
  QANetworkStackName:
    Description: Name of QA network stack
    Type: String
  DEVVpcIDOfSystem:
    Type: AWS::EC2::VPC::Id
    Description: DEV VPC of your system
  QAVpcIDOfSystem:
    Type: AWS::EC2::VPC::Id
    Description: QA VPC of your system
  SNSTopicName:
    Type: String
    Description: Name of SNS topic
  BatchLambdaArn:
    Type: String
    Description: ARN of lambda function which adds jobs to queue

Resources:
  DEVJobQueueAdHoc:
    Type: AWS::Batch::JobQueue
    Properties:
      JobQueueName: "DEV-adhoc"
      Priority: 1
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment:
            Ref: DEVComputeEnvironment

  QAJobQueueAdHoc:
    Type: AWS::Batch::JobQueue
    Properties:
      JobQueueName: "QA-adhoc"
      Priority: 1
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment:
            Ref: QAComputeEnviroment

  ProdJobQueueAdHoc:
    Type: AWS::Batch::JobQueue
    Properties:
      JobQueueName: "Prod-adhoc"
      Priority: 1
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment:
            Ref: ProdComputeEnviroment

  DEVJobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      JobQueueName: "DEV-JobQueue"
      Priority: 1
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment:
            Ref: DEVComputeEnvironment

  QAJobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      JobQueueName: "QA-JobQueue"
      Priority: 1
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment:
            Ref: QAComputeEnviroment

  ProdJobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      JobQueueName: "Prod-JobQueue"
      Priority: 1
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment:
            Ref: ProdComputeEnviroment

  DEVComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      Type: MANAGED
      ComputeEnvironmentName: "DEV-BatchCompute"
      ComputeResources:
        Type: FARGATE
        MaxvCpus: 32
        Subnets:
          - Fn::ImportValue:
              !Join [ '-', [ !Ref DEVNetworkStackName, 'Subnet1-Id' ] ]
          - Fn::ImportValue:
              !Join [ '-', [ !Ref DEVNetworkStackName, 'Subnet2-Id' ] ]
        SecurityGroupIds:
          - !Ref DEVBatchSecurityGroup
      ServiceRole:
        Ref: BatchServiceRole

  DEVBatchSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allaw inbound to port 80 and 5432, Outbound to everything
      GroupName: DEV-BatchSecurityGroup
      VpcId: !Ref DEVVpcIDOfSystem

  QAComputeEnviroment:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      Type: MANAGED
      ComputeEnvironmentName: "QA-BatchCompute"
      ComputeResources:
        Type: FARGATE
        MaxvCpus: 32
        Subnets:
          - Fn::ImportValue:
              !Join [ '-', [ !Ref QANetworkStackName, 'Subnet1-Id' ] ]
          - Fn::ImportValue:
              !Join [ '-', [ !Ref QANetworkStackName, 'Subnet2-Id' ] ]
        SecurityGroupIds:
          - !Ref QABatchSecurityGroup
      ServiceRole:
        Ref: BatchServiceRole

  QABatchSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allaw inbound to port 80 and 5432, Outbound to everything
      GroupName: QA-BatchSecurityGroup
      VpcId: !Ref QAVpcIDOfSystem

  ProdComputeEnviroment:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      Type: MANAGED
      ComputeEnvironmentName: "Prod-BatchCompute"
      ComputeResources:
        Type: FARGATE
        MaxvCpus: 32
        Subnets:
          - Fn::ImportValue:
              !Join [ '-', [ !Ref DEVNetworkStackName, 'Subnet1-Id' ] ]
          - Fn::ImportValue:
              !Join [ '-', [ !Ref DEVNetworkStackName, 'Subnet2-Id' ] ]
        SecurityGroupIds:
          - !Ref ProdBatchSecurityGroup
      ServiceRole:
        Ref: BatchServiceRole

  ProdBatchSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allaw inbound to port 80 and 5432, Outbound to everything
      GroupName: Prod-BatchSecurityGroup
      VpcId: !Ref DEVVpcIDOfSystem

  BatchTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonBatchECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Allow the ECS Tasks to download images from ECR
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'

                  # Allow the ECS tasks to upload logs to CloudWatch
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'

                  - 'ssm:GetParameter'
                  - 'ssm:GetParameters'
                  - 'ssm:GetParametersByPath'
                Resource: '*'

  BatchServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: batch.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole

  BatchSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "AWS Batch Job Has Failed"
      FifoTopic: FALSE
      Subscription:
        - Endpoint: "kehitys@digiroad.fi"
          Protocol: "email"
      TopicName: !Ref SNSTopicName

  BatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Send SNS email for failed batch jobs"
      EventPattern: {"detail-type": ["Batch Job State Change"], "source": ["aws.batch"], "detail": {"status": ["FAILED"]}}
      Name: "BatchEventNotify"
      State: "ENABLED"
      Targets:
        - Arn: !Join ['', ["arn:aws:sns:eu-west-1:475079312496:", !Ref SNSTopicName]]
          Id: "123321"
          InputTransformer:
            InputTemplate: |
                "Batch named <name> in queue <queue> failed. Reason was <reason> with exit code <code>. Log Stream is <log>"
            InputPathsMap:
              code: "$.detail.attempts[0].container.exitCode"
              log: "$.detail.attempts[0].container.logStreamName"
              name: "$.detail.jobName"
              queue: "$.detail.jobQueue"
              reason: "$.detail.statusReason"

  #Prod Batch Events
  ProdRunAnnualBatch:
    Type: AWS::Events::Rule
    Properties:
      Description: "Run annual Prod batches"
      ScheduleExpression: "cron(30 22 L 12 ? *)"
      State: "ENABLED"
      Targets:
        -
          Arn: !Ref BatchLambdaArn
          Input: "{\"jobName\": \"Prod\", \"jobDefinition\": \"ProdBatchJobDefinition\", \"type\":\"annual\"}"
          Id: "ProdAnnualLambda"


  ProdRunMonthlyBatch:
    Type: AWS::Events::Rule
    Properties:
      Description: "Run monthly Prod batches"
      ScheduleExpression: "cron(30 22 14 * ? *)"
      State: "ENABLED"
      Targets:
        -
          Arn: !Ref BatchLambdaArn
          Input: "{\"jobName\": \"Prod\", \"jobDefinition\": \"ProdBatchJobDefinition\", \"type\":\"monthly\"}"
          Id: "ProdMonthlyLambda"

  ProdRunWeeklyBatch:
    Type: AWS::Events::Rule
    Properties:
      Description: "Run weekly Prod batches"
      ScheduleExpression: "cron(0 22 ? * 6 *)"
      State: "ENABLED"
      Targets:
        -
          Arn: !Ref BatchLambdaArn
          Input: "{\"jobName\": \"Prod\", \"jobDefinition\": \"ProdBatchJobDefinition\", \"type\":\"weekly\"}"
          Id: "ProdWeeklyLambda"

  ProdRunDailyBatch:
    Type: AWS::Events::Rule
    Properties:
      Description: "Run daily Prod batches"
      ScheduleExpression: "cron(30 22 * * 1-5 *)"
      State: "ENABLED"
      Targets:
        -
          Arn: !Ref BatchLambdaArn
          Input: "{\"jobName\": \"Prod\", \"jobDefinition\": \"ProdBatchJobDefinition\", \"type\":\"daily\"}"
          Id: "ProdDailyLambda"

  #QA Batch Events
  QARunAnnualBatch:
    Type: AWS::Events::Rule
    Properties:
      Description: "Run annual QA batches"
      ScheduleExpression: "cron(30 22 L 12 ? *)"
      State: "ENABLED"
      Targets:
        -
          Arn: !Ref BatchLambdaArn
          Input: "{ \"jobName\": \"QA\", \"jobDefinition\": \"QABatchDefinition\", \"type\": \"annual\" }"
          Id: "QAAnnualLambda"

  QARunMonthlyBatch:
    Type: AWS::Events::Rule
    Properties:
      Description: "Run monthly QA batches"
      ScheduleExpression: "cron(30 22 14 * ? *)"
      State: "ENABLED"
      Targets:
        -
          Arn: !Ref BatchLambdaArn
          Input: "{ \"jobName\": \"QA\", \"jobDefinition\": \"QABatchDefinition\", \"type\": \"monthly\" }"
          Id: "QAMonthlyLambda"


  QARunWeeklyBatch:
    Type: AWS::Events::Rule
    Properties:
      Description: "Run weekly Prod batches"
      ScheduleExpression: "cron(0 22 ? * 6 *)"
      State: "ENABLED"
      Targets:
        -
          Arn: !Ref BatchLambdaArn
          Input: "{ \"jobName\": \"QA\", \"jobDefinition\": \"QABatchDefinition\", \"type\": \"weekly\" }"
          Id: "QAWeeklyLambda"

  QARunDailyBatch:
    Type: AWS::Events::Rule
    Properties:
      Description: "Run daily QA batches"
      ScheduleExpression: "cron(30 22 * * 1-5 *)"
      State: "ENABLED"
      Targets:
        -
          Arn: !Ref BatchLambdaArn
          Input: "{ \"jobName\": \"QA\", \"jobDefinition\": \"QABatchDefinition\", \"type\": \"daily\" }"
          Id: "QADailyLambda"

  #DEV Batch Events
  DEVRunAnnualBatch:
    Type: AWS::Events::Rule
    Properties:
      Description: "Run annual DEV batches"
      ScheduleExpression: "cron(30 22 L 12 ? *)"
      State: "ENABLED"
      Targets:
        -
          Arn: !Ref BatchLambdaArn
          Input: "{ \"jobName\": \"DEV\", \"jobDefinition\": \"DEVBatchDefinition\", \"type\": \"annual\" }"
          Id: "DEVAnnualLambda"

  DEVRunMonthlyBatch:
    Type: AWS::Events::Rule
    Properties:
      Description: "Run monthly DEV batches"
      ScheduleExpression: "cron(30 22 14 * ? *)"
      State: "ENABLED"
      Targets:
        -
          Arn: !Ref BatchLambdaArn
          Input: "{ \"jobName\": \"DEV\", \"jobDefinition\": \"DEVBatchDefinition\", \"type\": \"monthly\" }"
          Id: "DEVMonthlyLambda"

  DEVRunWeeklyBatch:
    Type: AWS::Events::Rule
    Properties:
      Description: "Run weekly DEV batches"
      ScheduleExpression: "cron(0 22 ? * 6 *)"
      State: "ENABLED"
      Targets:
        -
          Arn: !Ref BatchLambdaArn
          Input: "{ \"jobName\": \"DEV\", \"jobDefinition\": \"DEVBatchDefinition\", \"type\": \"weekly\" }"
          Id: "DEVWeeklyLambda"

  DEVRunDailyBatch:
    Type: AWS::Events::Rule
    Properties:
      Description: "Run daily DEV batches"
      ScheduleExpression: "cron(30 22 * * 1-5 *)"
      State: "ENABLED"
      Targets:
        -
          Arn: !Ref BatchLambdaArn
          Input: "{ \"jobName\": \"DEV\", \"jobDefinition\": \"DEVBatchDefinition\", \"type\": \"daily\" }"
          Id: "DEVDailyLambda"

  #Lambda permissions for prod events
  ProdAnnualLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref BatchLambdaArn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ProdRunAnnualBatch.Arn

  ProdMonthlyLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref BatchLambdaArn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ProdRunMonthlyBatch.Arn

  ProdWeeklyLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref BatchLambdaArn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ProdRunWeeklyBatch.Arn

  ProdDailyLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref BatchLambdaArn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ProdRunDailyBatch.Arn

  #Lambda permissions for QA events
  QAAnnualLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref BatchLambdaArn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt QARunAnnualBatch.Arn

  QAMonthlyLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref BatchLambdaArn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt QARunMonthlyBatch.Arn

  QAWeeklyLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref BatchLambdaArn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt QARunWeeklyBatch.Arn

  QADailyLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref BatchLambdaArn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt QARunDailyBatch.Arn

  #Lambda permissions for DEV events
  DEVAnnualLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref BatchLambdaArn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt DEVRunAnnualBatch.Arn

  DEVMonthlyLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref BatchLambdaArn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt DEVRunMonthlyBatch.Arn

  DEVWeeklyLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref BatchLambdaArn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt DEVRunWeeklyBatch.Arn

  DEVDailyLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref BatchLambdaArn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt DEVRunDailyBatch.Arn

Outputs:
  BatchTaskRoleARN:
    Description: BatchTaskRole
    Value: !GetAtt BatchTaskRole.Arn
  BatchExecutionArn:
    Description: BatchServiceRole
    Value: !GetAtt BatchServiceRole.Arn
