AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  NetworkStackName:
    Description: Name of network stack
    Type: String
  VpcIDOfSystem:
    Type: AWS::EC2::VPC::Id
    Description: VPC of your system
  SNSTopicName:
    Type: String
    Description: Name of SNS topic
  EnvironmentName:
    Type: String
    Description: Name of used environment
  JobDefinitionName:
    Type: String
    Description: Name of Job Definition that Lambda uses to submit job
  BatchLambdaStackName:
    Type: String
    Description: Stack name of batch lambda, used for ImportValue
  Subnet1:
    Type: String
    Description: Subnet1 Id for ImportValue
  Subnet2:
    Type: String
    Description: Subnet2 Id for ImportValue
  Owner:
    Description: "Owner of the of application, that these resources are created for. Used when tagging the resources"
    Type: String
  Project:
    Description: "Project of the of application, that these resources are created for. Used when tagging the resources"
    Type: String

Resources:
  JobQueueAdHoc:
    Type: AWS::Batch::JobQueue
    Properties:
      JobQueueName: !Join [ '-', [ !Ref EnvironmentName, 'adhoc']]
      Priority: 1
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment:
            Ref: ComputeEnvironment
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref EnvironmentName, 'JobQueueAdhoc' ] ]
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project

  JobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      JobQueueName: !Join [ '-', [ !Ref EnvironmentName, 'jobQueue']]
      Priority: 1
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment:
            Ref: ComputeEnvironment
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref EnvironmentName, 'JobQueue' ] ]
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project
  ComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      Type: MANAGED
      ComputeEnvironmentName: !Join [ '-', [ !Ref EnvironmentName, 'BatchCompute']]
      ComputeResources:
        Type: FARGATE
        MaxvCpus: 32
        Subnets:
          - Fn::ImportValue:
              !Ref Subnet1
          - Fn::ImportValue:
              !Ref Subnet2
        SecurityGroupIds:
          - !Ref BatchSecurityGroup
      ServiceRole:
        Ref: BatchServiceRole
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref EnvironmentName, 'BatchComputeEnvironment' ] ]
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project

  BatchSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow inbound to port 80 and 5432, Outbound to everything
      GroupName: !Join [ '-', [ !Ref EnvironmentName, 'batchSecurityGroup']]
      VpcId: !Ref VpcIDOfSystem
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref EnvironmentName, 'batchSecurityGroup' ] ]
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project

  BatchTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: !Join [ '-', [ !Ref EnvironmentName, 'AmazonBatchECSTaskExecutionRolePolicy']]
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Allow the ECS Tasks to download images from ECR
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'

                  # Allow the ECS tasks to upload logs to CloudWatch
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'

                  - 'ssm:GetParameter'
                  - 'ssm:GetParameters'
                  - 'ssm:GetParametersByPath'
                Resource: '*'
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref EnvironmentName, 'batchTaskRole' ] ]
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project

  BatchServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: batch.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref EnvironmentName, 'batchServiceRole' ] ]
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project

  BatchSNSTopic:
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: "AWS Batch Job Has Failed"
      FifoTopic: FALSE
      Subscription: 
        - Endpoint: "kehitys@digiroad.fi"
          Protocol: "email"
      TopicName: !Join [ '-', [ !Ref EnvironmentName, !Ref SNSTopicName ] ]
      Tags:
          - Key: Name
            Value: !Join [ '-', [ !Ref EnvironmentName, 'batchFailTopic' ] ]
          - Key: Environment
            Value: !Ref EnvironmentName
          - Key: Owner
            Value: !Ref Owner
          - Key: Project
            Value: !Ref Project

  BatchEventRule:
    Type: AWS::Events::Rule
    Properties: 
      Description: "Send SNS email for failed batch jobs"
      EventPattern: {"detail-type": ["Batch Job State Change"], "source": ["aws.batch"], "detail": {"status": ["FAILED"]}}
      Name: "BatchEventNotify"
      State: "ENABLED"
      Targets:
        - Arn: !Join ['', ["arn:aws:sns:eu-west-1:475079312496:", !Ref EnvironmentName, '-', !Ref SNSTopicName]]
          Id: "123321"
          InputTransformer:
            InputTemplate: |
                "Batch named <name> in queue <queue> failed. Reason was <reason> with exit code <code>. Log Stream is <log>"
            InputPathsMap:
              code: "$.detail.attempts[0].container.exitCode"
              log: "$.detail.attempts[0].container.logStreamName"
              name: "$.detail.jobName"
              queue: "$.detail.jobQueue"
              reason: "$.detail.statusReason"
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref EnvironmentName, 'batchFailEventRule' ] ]
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project

  #Batch Events
  RunAnnualBatch:
    Type: AWS::Events::Rule
    Properties:
      Name: !Join [ '-', [ !Ref EnvironmentName, 'BatchAnnualEventRule' ]]
      Description: "Run annual batches"
      ScheduleExpression: "cron(30 22 L 12 ? *)"
      State: "ENABLED"
      Targets:
        -
          Arn:
            - !ImportValue
              !Sub: '${BatchLambdaStackName}-BatchLambdaID'
          Input: !Join [ '', [ '{ \"jobName\": ', '\"', !Ref EnvironmentName, '\", ', '\"jobDefinition\": ', '\"', !Ref JobDefinitionName, '\", ', '\"type\": \"annual\" }' ]]
          Id: !Join [ '-' [!Ref EnvironmentName, 'AnnualLambda']]
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref EnvironmentName, 'batchAnnualEventRule' ] ]
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project

  RunMonthlyBatch:
    Type: AWS::Events::Rule
    Properties:
      Name: !Join [ '-', [ !Ref EnvironmentName, 'BatchMonthlyEventRule' ]]
      Description: "Run monthly batches"
      ScheduleExpression: "cron(30 22 14 * ? *)"
      State: "ENABLED"
      Targets:
        -
          Arn:
            - !ImportValue
              !Sub: '${BatchLambdaStackName}-BatchLambdaID'
          Input: !Join [ '', [ '{ \"jobName\": ', '\"', !Ref EnvironmentName, '\", ', '\"jobDefinition\": ', '\"', !Ref JobDefinitionName, '\", ', '\"type\": \"monthly\" }' ]]
          Id: !Join [ '-' [!Ref EnvironmentName, 'MonthlyLambda']]
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref EnvironmentName, 'batchMonthlyEventRule' ] ]
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project

  RunWeeklyBatch:
    Type: AWS::Events::Rule
    Properties:
      Name: !Join [ '-', [ !Ref EnvironmentName, 'BatchWeeklyEventRule' ]]
      Description: "Run weekly batches"
      ScheduleExpression: "cron(0 22 ? * 6 *)"
      State: "ENABLED"
      Targets:
        -
          Arn:
            - !ImportValue
              !Sub: '${BatchLambdaStackName}-BatchLambdaID'
          Input: !Join [ '', [ '{ \"jobName\": ', '\"', !Ref EnvironmentName, '\", ', '\"jobDefinition\": ', '\"', !Ref JobDefinitionName, '\", ', '\"type\": \"weekly\" }' ]]
          Id: !Join [ '-' [!Ref EnvironmentName, 'WeeklyLambda']]
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref EnvironmentName, 'batchWeeklyEventRule' ] ]
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project

  RunDailyBatch:
    Type: AWS::Events::Rule
    Properties:
      Name: !Join [ '-', [ !Ref EnvironmentName, 'batchDailyEventRule' ]]
      Description: "Run daily batches"
      ScheduleExpression: "cron(30 22 ? * 1-5 *)"
      State: "ENABLED"
      Targets:
        -
          Arn:
            - !ImportValue
              !Sub: '${BatchLambdaStackName}-BatchLambdaID'
          Input: !Join [ '', [ '{ \"jobName\": ', '\"', !Ref EnvironmentName, '\", ', '\"jobDefinition\": ', '\"', !Ref JobDefinitionName, '\", ', '\"type\": \"daily\" }' ]]
          Id: !Join [ '-' [!Ref EnvironmentName, 'DailyLambda']]
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref EnvironmentName, 'batchDailyEventRule' ] ]
        - Key: Environment
          Value: !Ref EnvironmentName

#  Need special Event Rule for this batch because batch must be started at specific time
  RunRefreshCacheBatch:
    Type: AWS::Events::Rule
    Properties:
      Name: !Join [ '-', [ !Ref EnvironmentName, 'batchRefreshCacheEventRule' ] ]
      Description: "Run refresh_road_link_cache batch on Friday 16:00"
      ScheduleExpression: "cron(0 0 14 ? * FRI *)"
      State: "ENABLED"
      Targets:
        - Arn:
            - !ImportValue
              !Sub: '${BatchLambdaStackName}-BatchLambdaID'
          Input: !Join [ '', [ '{ \"jobName\": ', '\"', !Ref EnvironmentName, '\", ', '\"jobDefinition\": ', '\"', !Ref JobDefinitionName, '\", ', '\"type\": \"daily\" }' ] ]
          Id: !Join [ '-' [ !Ref EnvironmentName, 'DailyLambda' ] ]
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref EnvironmentName, 'batchRefreshCacheEventRule' ] ]
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project

  #Lambda permissions for events
  AnnualLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        - !ImportValue
          !Sub: '${BatchLambdaStackName}-BatchLambdaID'
      Principal: events.amazonaws.com
      SourceArn: !GetAtt RunAnnualBatch.Arn
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref EnvironmentName, 'batchAnnualLambdaPermission' ] ]
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project

  MonthlyLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        - !ImportValue
          !Sub: '${BatchLambdaStackName}-BatchLambdaID'
      Principal: events.amazonaws.com
      SourceArn: !GetAtt RunMonthlyBatch.Arn
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref EnvironmentName, 'batchMonthlyLambdaPermission' ] ]
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project

  WeeklyLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        - !ImportValue
          !Sub: '${BatchLambdaStackName}-BatchLambdaID'
      Principal: events.amazonaws.com
      SourceArn: !GetAtt RunWeeklyBatch.Arn
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref EnvironmentName, 'batchWeeklyLambdaPermission' ] ]
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project

  DailyLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        - !ImportValue
          !Sub: '${BatchLambdaStackName}-BatchLambdaID'
      Principal: events.amazonaws.com
      SourceArn: !GetAtt RunDailyBatch.Arn
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref EnvironmentName, 'batchWeeklyLambdaPermission' ] ]
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Owner
          Value: !Ref Owner
        - Key: Project
          Value: !Ref Project

Outputs:
  BatchTaskRoleARN:
    Description: BatchTaskRole
    Value: !GetAtt BatchTaskRole.Arn
  BatchExecutionArn:
    Description: BatchServiceRole
    Value: !GetAtt BatchServiceRole.Arn
