AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Based on vaylas cicd-github.yaml template
Parameters:
  PipelineName:
    Description: Pipeline name, no capital letter
    Type: String
  ApplicationName:
    Description: Application name CodeBuildName
    Type: String
  CodeBuildName:
    Description: CodeBuildName
    Type: String
  EcsClusterName:
    Description: ECS cluster name
    Type: String
  EcsServiceName:
    Description: ECS service name
    Type: String
  EcrRepositoryName:
    Description: ECR image name
    Type: String
    AllowedPattern: "^[a-z0-9]+$"
  VpcIDOfSystem:
    Type: AWS::EC2::VPC::Id
    Description: VPC of your system

Resources:

  CodePipelineArtifactStoreBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub "${PipelineName}-artifact-store-bucket"

  CodePipelineArtifactStoreBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref CodePipelineArtifactStoreBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: DenyUnEncryptedObjectUploads
            Effect: Deny
            Principal: '*'
            Action: 's3:PutObject'
            Resource: !Sub "${CodePipelineArtifactStoreBucket.Arn}/*"
            Condition:
              StringNotEquals:
                's3:x-amz-server-side-encryption': 'aws:kms'
          - Sid: DenyInsecureConnections
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource: !Sub "${CodePipelineArtifactStoreBucket.Arn}/*"
            Condition:
              Bool:
                'aws:SecureTransport': false

  AppPipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      Name: !Ref PipelineName
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineArtifactStoreBucket
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: ECR
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                RepositoryName: !Ref EcrRepositoryName
        - Name: Accept
          Actions:
            - Name: Approve_Image_For_Production
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Version: 1
                Provider: Manual
        - Name: Build
          Actions:
            - Name: BuildAction
              InputArtifacts:
                - Name: SourceOutput
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              OutputArtifacts:
                - Name: Built
              Configuration:
                ProjectName: !Ref CodeBuild
              RunOrder: 1


  CodePipelineServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub "${PipelineName}-codepipeline-role"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: !Sub "${PipelineName}-codepipeline-policy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'codebuild:BatchGetBuilds'
                  - 'codebuild:StartBuild'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                  - 'lambda:ListFunctions'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'iam:PassRole'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'cloudwatch:*'
                  - 's3:*'
                  - 'cloudformation:*'
                  - 'ecs:*'
                Resource: '*'
              - Effect: "Allow"
                Resource: "*"
                Action:
                  - "ecr:DescribeRepositories"
                  - "ecr:ListImages"
                  - "ecr:DescribeImages"
                  - "ecr:BatchGetImage"
                  - "ecr:ListTagsForResource"
                  - "ecr:DescribeImageScanFindings"
      
  
  CodeBuildSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allaw inbound to port 80, Outbound to everything
      GroupName: !Sub "${CodeBuildName}-CodeBuildSecurityGroup"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIpv6: ::/0
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VpcIDOfSystem

  CodeBuild:
    DependsOn:
      - CodeBuildRole
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Ref CodeBuildName
      Description: "Tag image for Production repository."
      ServiceRole: !Ref CodeBuildRole
      VpcConfig:
        SecurityGroupIds:
          - !Ref CodeBuildSecurityGroup
        Subnets:
          - subnet-0d38ee507d838207c
        VpcId: !Ref VpcIDOfSystem
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:5.0 # https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-available.html
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: ECR_REPOSITORY_URI
            Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrRepositoryName}"
          - Name: ECR_PROD_URI
            Value: "920408837790.dkr.ecr.eu-west-1.amazonaws.com/digiroad2"
          - Name: ECS_CONTAINER_NAME
            Value: !Ref ApplicationName
      Artifacts:
        Name: !Ref ApplicationName
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2 
          phases:
            install:
              runtime-versions:
                java: corretto8
            pre_build:
              commands:
                - pip install --upgrade awscli
                - $(aws ecr get-login --no-include-email --region eu-west-1)
            build:
              commands:
                - docker pull $ECR_REPOSITORY_URI:qa
                - docker tag  $ECR_REPOSITORY_URI:qa $ECR_PROD_URI:prod
                - docker push $ECR_PROD_URI:prod
                - docker push $ECR_REPOSITORY_URI:prod
            post_build:
              commands:
                - printf '[{"name":"%s","imageUri":"%s"}]' $ECS_CONTAINER_NAME $ECR_PROD_URI:prod > imagedefinitions.json
          artifacts:
            files: imagedefinitions.json

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      #Roolin nimi kovakoodattu PROD-ECR-parameter.json ÄLÄ MUUTA
      RoleName: "codebuild-DigiroadProd"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: !Sub "${PipelineName}-codebuild-policy"
          PolicyDocument:
            Statement:
              - Effect: "Allow"
                Resource: "*"
                Action:
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:GetRepositoryPolicy"
                  - "ecr:DescribeRepositories"
                  - "ecr:ListImages"
                  - "ecr:DescribeImages"
                  - "ecr:BatchGetImage"
                  - "ecr:GetLifecyclePolicy"
                  - "ecr:GetLifecyclePolicyPreview"
                  - "ecr:ListTagsForResource"
                  - "ecr:DescribeImageScanFindings"
                  - "ecr:InitiateLayerUpload"
                  - "ecr:UploadLayerPart"
                  - "ecr:CompleteLayerUpload"
                  - "ecr:PutImage"
                  - "ssm:GetParameters"
                  - 'ec2:DescribeSecurityGroups'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DescribeSubnets'
                  - 'ec2:DescribeDhcpOptions'
                  - 'ec2:DescribeVpcs'
                  - 'ec2:DeleteNetworkInterface'
                  - 'ec2:CreateNetworkInterface'
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterfacePermission
                Resource: arn:aws:ec2:eu-west-1:475079312496:network-interface/*
                Condition:
                  StringEquals:
                    ec2:Subnet:
                      - arn:aws:ec2:eu-west-1:475079312496:subnet/subnet-0d38ee507d838207c
                    ec2:AuthorizedService: codebuild.amazonaws.com
              - Effect: "Allow"
                Resource: "*"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
              - Effect: "Allow"
                Resource:
                  - !Sub "arn:aws:s3:::${CodePipelineArtifactStoreBucket}/*"
                Action:
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:PutObject"